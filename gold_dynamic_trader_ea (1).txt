//+------------------------------------------------------------------+
//|                                             GoldDynamicTrader.mq5 |
//|                                            Copyright 2025, TraderX |
//|                                            https://www.example.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, TraderX"
#property link      "https://www.example.com"
#property version   "1.00"
#property strict
#property description "Advanced Multi-Timeframe Gold Trading System"

/*
   STRATEGY OVERVIEW:
   -----------------
   
   This Expert Advisor implements a sophisticated multi-timeframe trading system
   specifically optimized for Gold (XAUUSD) trading on the M5 timeframe.
   
   CORE COMPONENTS:
   
   1. Dynamic Time-Weighted Volatility Band (DTWVB):
      A proprietary volatility band that dynamically adjusts its width based on:
      - Intrabar acceleration of tick volume
      - Gann-angle projection of recent price swings
      - Hilbert Transform phase on higher timeframe (M15)
      This creates a dynamic envelope that expands during accelerating markets
      and contracts during consolidation, providing adaptive support/resistance.
   
   2. Pressure Index:
      A custom momentum oscillator that combines:
      - Price spread (high-low range)
      - Volume acceleration
      - Rate of change in price movement
      This measures the "pressure" behind price moves to identify high-probability
      breakouts and filter false signals.
   
   3. Multi-Timeframe Trend Filter:
      - Uses Hilbert Transform on M15 to identify the dominant cycle and trend direction
      - Only allows long trades during uptrend phases and short trades during downtrend phases
   
   4. Adaptive Fractal Volatility Envelope:
      Calculates dynamic support/resistance levels based on highest highs and lowest lows
      over a window that adjusts based on market volatility (ATR-scaled)
   
   5. Dynamic Risk Management:
      - Position sizing based on account equity and current market volatility
      - Dynamic stop loss and take profit based on ATR multiples
      - Trailing stop that adapts to the width of the volatility band
   
   The EA avoids common pitfalls by:
   - Verifying all indicator handles
   - Checking data validity before calculations
   - Implementing robust error handling
   - Ensuring proper trade context
   - Verifying sufficient historical data
   - Using proper buffer copying techniques
*/

// Input parameters
input string   Symbol_Name = "XAUUSD";   // Trading symbol
input ENUM_TIMEFRAMES Primary_TF = PERIOD_M5;     // Primary trading timeframe
input ENUM_TIMEFRAMES Filter_TF = PERIOD_M15;     // Trend filter timeframe
input int      Magic_Number = 12345;     // Magic number for trade identification
input double   Risk_Percent = 1.0;       // Risk percentage of account (0-5%)
input double   SL_Multiplier = 2.0;      // Stop loss ATR multiplier
input double   TP_Multiplier = 3.0;      // Take profit ATR multiplier
input double   TrailingStop_Trigger = 1.5; // Trailing stop trigger (ATR multiple)
input double   TrailingStop_Step = 0.5;  // Trailing stop step (ATR multiple)
input int      ATR_Period = 14;          // ATR period
input int      Hilbert_Period = 14;      // Hilbert transform period
input int      Volatility_Lookback = 20; // Lookback period for volatility calculations
input int      Volume_Lookback = 10;     // Lookback period for volume calculations
input double   Gann_Angle = 45.0;        // Gann angle for projections (degrees)
input double   Pressure_Threshold = 0.7; // Threshold for pressure index (0-1)

// Global variables
int ATR_Handle;
int Hilbert_Handle_M15;
int Tick_Volume_Handle;
int Bars_Required;

// Arrays for storing indicator values
double ATR_Buffer[];
double HilbertPhase_Buffer[];
double HilbertPeriod_Buffer[];
double TickVolume_Buffer[];
double VolatilityBand_Upper[];
double VolatilityBand_Lower[];
double PressureIndex_Buffer[];
datetime Time_Array[];

// Constants
#define SIGNAL_NONE 0
#define SIGNAL_BUY 1
#define SIGNAL_SELL -1

//+------------------------------------------------------------------+
//| Custom logging function                                           |
//+------------------------------------------------------------------+
void Log(string message)
{
   Print(TimeToString(TimeCurrent(), TIME_DATE|TIME_SECONDS), " [GoldDynamicTrader] ", message);
}

//+------------------------------------------------------------------+
//| Expert initialization function                                    |
//+------------------------------------------------------------------+
int OnInit()
{
   // Verify symbol is available
   if(!SymbolSelect(Symbol_Name, true))
   {
      Log("Symbol " + Symbol_Name + " is not available. Please check symbol name.");
      return INIT_FAILED;
   }
   
   // Initialize indicators
   
   // ATR Handle
   ATR_Handle = iATR(Symbol_Name, Primary_TF, ATR_Period);
   if(ATR_Handle == INVALID_HANDLE)
   {
      Log("Failed to create ATR indicator handle. Error: " + string(GetLastError()));
      return INIT_FAILED;
   }
   
   // Hilbert Transform Handle for M15
   Hilbert_Handle_M15 = iCustom(Symbol_Name, Filter_TF, "Examples\\HilbertTransform");
   if(Hilbert_Handle_M15 == INVALID_HANDLE)
   {
      Log("Failed to create Hilbert Transform indicator handle. Error: " + string(GetLastError()));
      IndicatorRelease(ATR_Handle);
      return INIT_FAILED;
   }
   
   // Tick Volume Indicator Handle
   Tick_Volume_Handle = iVolumes(Symbol_Name, Primary_TF, VOLUME_TICK);
   if(Tick_Volume_Handle == INVALID_HANDLE)
   {
      Log("Failed to create Tick Volume indicator handle. Error: " + string(GetLastError()));
      IndicatorRelease(ATR_Handle);
      IndicatorRelease(Hilbert_Handle_M15);
      return INIT_FAILED;
   }
   
   // Calculate bars required
   Bars_Required = MathMax(Volatility_Lookback, Volume_Lookback) + 100; // Add buffer for safety
   
   // Initialize arrays
   ArraySetAsSeries(ATR_Buffer, true);
   ArraySetAsSeries(HilbertPhase_Buffer, true);
   ArraySetAsSeries(HilbertPeriod_Buffer, true);
   ArraySetAsSeries(TickVolume_Buffer, true);
   ArraySetAsSeries(VolatilityBand_Upper, true);
   ArraySetAsSeries(VolatilityBand_Lower, true);
   ArraySetAsSeries(PressureIndex_Buffer, true);
   ArraySetAsSeries(Time_Array, true);
   
   // Resize arrays
   ArrayResize(ATR_Buffer, Bars_Required);
   ArrayResize(HilbertPhase_Buffer, Bars_Required);
   ArrayResize(HilbertPeriod_Buffer, Bars_Required);
   ArrayResize(TickVolume_Buffer, Bars_Required);
   ArrayResize(VolatilityBand_Upper, Bars_Required);
   ArrayResize(VolatilityBand_Lower, Bars_Required);
   ArrayResize(PressureIndex_Buffer, Bars_Required);
   ArrayResize(Time_Array, Bars_Required);
   
   // Wait for sufficient historical data
   Log("Waiting for sufficient historical data...");
   int bars_available = Bars(Symbol_Name, Primary_TF);
   if(bars_available < Bars_Required)
   {
      Log("Not enough bars in history. Required: " + string(Bars_Required) + ", Available: " + string(bars_available));
      IndicatorRelease(ATR_Handle);
      IndicatorRelease(Hilbert_Handle_M15);
      IndicatorRelease(Tick_Volume_Handle);
      return INIT_FAILED;
   }
   
   // Create timer for periodic updates (1 second)
   if(!EventSetTimer(1))
   {
      Log("Failed to set timer. Error: " + string(GetLastError()));
      IndicatorRelease(ATR_Handle);
      IndicatorRelease(Hilbert_Handle_M15);
      IndicatorRelease(Tick_Volume_Handle);
      return INIT_FAILED;
   }
   
   Log("GoldDynamicTrader initialized successfully");
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Release indicator handles
   IndicatorRelease(ATR_Handle);
   IndicatorRelease(Hilbert_Handle_M15);
   IndicatorRelease(Tick_Volume_Handle);
   
   // Delete timer
   EventKillTimer();
   
   Log("GoldDynamicTrader deinitialized. Reason: " + string(reason));
}

//+------------------------------------------------------------------+
//| Timer function                                                    |
//+------------------------------------------------------------------+
void OnTimer()
{
   // Check if EA should exit
   if(IsStopped())
      return;
      
   // Update indicators and perform calculations
   UpdateIndicators();
}

//+------------------------------------------------------------------+
//| Tick function                                                     |
//+------------------------------------------------------------------+
void OnTick()
{
   // Check if EA should exit
   if(IsStopped())
      return;
   
   // Update indicators and calculate signals
   if(!UpdateIndicators())
      return;
   
   // Check for new bar
   static datetime last_bar_time = 0;
   datetime current_bar_time = iTime(Symbol_Name, Primary_TF, 0);
   
   bool is_new_bar = (current_bar_time != last_bar_time);
   if(is_new_bar)
   {
      last_bar_time = current_bar_time;
      
      // Calculate trading signals
      int signal = CalculateSignal();
      
      // Execute trading logic based on signal
      ExecuteTrades(signal);
      
      // Manage open positions
      ManagePositions();
   }
}

//+------------------------------------------------------------------+
//| Update indicator values                                           |
//+------------------------------------------------------------------+
bool UpdateIndicators()
{
   // Get current bar time
   int copied = CopyTime(Symbol_Name, Primary_TF, 0, 1, Time_Array);
   if(copied != 1)
   {
      Log("Failed to copy bar time. Error: " + string(GetLastError()));
      return false;
   }
   
   // Copy ATR values
   copied = CopyBuffer(ATR_Handle, 0, 0, Bars_Required, ATR_Buffer);
   if(copied != Bars_Required)
   {
      Log("Failed to copy ATR buffer. Copied: " + string(copied) + ", Required: " + string(Bars_Required));
      return false;
   }
   
   // Copy Hilbert Transform values (phase and dominant cycle)
   copied = CopyBuffer(Hilbert_Handle_M15, 0, 0, Bars_Required, HilbertPhase_Buffer); // Phase
   if(copied != Bars_Required)
   {
      Log("Failed to copy Hilbert phase buffer. Copied: " + string(copied) + ", Required: " + string(Bars_Required));
      return false;
   }
   
   copied = CopyBuffer(Hilbert_Handle_M15, 1, 0, Bars_Required, HilbertPeriod_Buffer); // Dominant cycle
   if(copied != Bars_Required)
   {
      Log("Failed to copy Hilbert period buffer. Copied: " + string(copied) + ", Required: " + string(Bars_Required));
      return false;
   }
   
   // Copy Tick Volume values
   copied = CopyBuffer(Tick_Volume_Handle, 0, 0, Bars_Required, TickVolume_Buffer);
   if(copied != Bars_Required)
   {
      Log("Failed to copy Tick Volume buffer. Copied: " + string(copied) + ", Required: " + string(Bars_Required));
      return false;
   }
   
   // Calculate Dynamic Time-Weighted Volatility Band
   CalculateDynamicVolatilityBand();
   
   // Calculate Pressure Index
   CalculatePressureIndex();
   
   return true;
}

//+------------------------------------------------------------------+
//| Calculate Dynamic Time-Weighted Volatility Band                   |
//+------------------------------------------------------------------+
void CalculateDynamicVolatilityBand()
{
   // Price arrays
   double high[], low[], close[];
   ArraySetAsSeries(high, true);
   ArraySetAsSeries(low, true);
   ArraySetAsSeries(close, true);
   
   // Copy price data
   if(CopyHigh(Symbol_Name, Primary_TF, 0, Bars_Required, high) != Bars_Required)
   {
      Log("Failed to copy high prices");
      return;
   }
   
   if(CopyLow(Symbol_Name, Primary_TF, 0, Bars_Required, low) != Bars_Required)
   {
      Log("Failed to copy low prices");
      return;
   }
   
   if(CopyClose(Symbol_Name, Primary_TF, 0, Bars_Required, close) != Bars_Required)
   {
      Log("Failed to copy close prices");
      return;
   }
   
   // Calculate tick volume acceleration
   double volume_acceleration[]; 
   ArrayResize(volume_acceleration, Bars_Required);
   ArraySetAsSeries(volume_acceleration, true);
   
   for(int i = Bars_Required - 3; i >= 0; i--)
   {
      // Calculate first derivative (velocity)
      double velocity = TickVolume_Buffer[i] - TickVolume_Buffer[i + 1];
      
      // Calculate second derivative (acceleration)
      double prev_velocity = TickVolume_Buffer[i + 1] - TickVolume_Buffer[i + 2];
      volume_acceleration[i] = velocity - prev_velocity;
   }
   
   // Calculate Gann angle projections
   double gann_projection_up[]; 
   double gann_projection_down[];
   ArrayResize(gann_projection_up, Bars_Required);
   ArrayResize(gann_projection_down, Bars_Required);
   ArraySetAsSeries(gann_projection_up, true);
   ArraySetAsSeries(gann_projection_down, true);
   
   // Convert Gann angle to radians
   double gann_angle_rad = Gann_Angle * M_PI / 180.0;
   double gann_slope = MathTan(gann_angle_rad);
   
   for(int i = Bars_Required - 1; i >= 0; i--)
   {
      // Use ATR for scaling the Gann projections
      double atr_value = ATR_Buffer[i];
      
      // Calculate Gann projections
      gann_projection_up[i] = close[i] + atr_value * gann_slope;
      gann_projection_down[i] = close[i] - atr_value * gann_slope;
   }
   
   // Calculate Hilbert Transform phase influence
   // Phase ranges from -100 to 100, normalize to 0-1
   double phase_influence[]; 
   ArrayResize(phase_influence, Bars_Required);
   ArraySetAsSeries(phase_influence, true);
   
   for(int i = 0; i < Bars_Required; i++)
   {
      phase_influence[i] = (HilbertPhase_Buffer[i] + 100.0) / 200.0;
   }
   
   // Combine all factors to calculate the final volatility band
   for(int i = 0; i < Bars_Required; i++)
   {
      // Normalize volume acceleration
      double norm_volume_accel = 0;
      if(i < Bars_Required - 3)
      {
         double max_accel = 0;
         for(int j = i; j < i + Volume_Lookback && j < Bars_Required - 3; j++)
         {
            max_accel = MathMax(max_accel, MathAbs(volume_acceleration[j]));
         }
         
         if(max_accel > 0)
            norm_volume_accel = MathAbs(volume_acceleration[i]) / max_accel;
      }
      
      // Calculate band width based on ATR, volume acceleration, and phase
      double base_width = ATR_Buffer[i] * (1.0 + norm_volume_accel);
      double phase_width_factor = 0.5 + phase_influence[i];
      double band_width = base_width * phase_width_factor;
      
      // Apply Gann projections
      double gann_influence = 0.3; // 30% influence from Gann projections
      
      VolatilityBand_Upper[i] = close[i] + band_width + gann_influence * (gann_projection_up[i] - close[i]);
      VolatilityBand_Lower[i] = close[i] - band_width + gann_influence * (gann_projection_down[i] - close[i]);
   }
}

//+------------------------------------------------------------------+
//| Calculate Pressure Index                                          |
//+------------------------------------------------------------------+
void CalculatePressureIndex()
{
   // Price arrays
   double high[], low[], close[];
   ArraySetAsSeries(high, true);
   ArraySetAsSeries(low, true);
   ArraySetAsSeries(close, true);
   
   // Copy price data
   if(CopyHigh(Symbol_Name, Primary_TF, 0, Bars_Required, high) != Bars_Required ||
      CopyLow(Symbol_Name, Primary_TF, 0, Bars_Required, low) != Bars_Required ||
      CopyClose(Symbol_Name, Primary_TF, 0, Bars_Required, close) != Bars_Required)
   {
      Log("Failed to copy price data for Pressure Index calculation");
      return;
   }
   
   // Calculate Pressure Index
   for(int i = 0; i < Bars_Required; i++)
   {
      // Skip if we don't have enough data
      if(i >= Bars_Required - 5) 
      {
         PressureIndex_Buffer[i] = 0;
         continue;
      }
      
      // Calculate price spread
      double price_spread = high[i] - low[i];
      
      // Calculate price velocity (rate of change)
      double price_velocity = (close[i] - close[i+3]) / 3;
      
      // Calculate volume acceleration (already done in previous function)
      double volume_accel = 0;
      if(i < Bars_Required - 3)
      {
         double velocity = TickVolume_Buffer[i] - TickVolume_Buffer[i + 1];
         double prev_velocity = TickVolume_Buffer[i + 1] - TickVolume_Buffer[i + 2];
         volume_accel = velocity - prev_velocity;
      }
      
      // Normalize each component
      double norm_spread = 0;
      double norm_velocity = 0;
      double norm_accel = 0;
      
      // Find max values for normalization
      double max_spread = 0;
      double max_velocity = 0;
      double max_accel = 0;
      
      for(int j = i; j < i + Volume_Lookback && j < Bars_Required - 3; j++)
      {
         max_spread = MathMax(max_spread, high[j] - low[j]);
         max_velocity = MathMax(max_velocity, MathAbs((close[j] - close[MathMin(j+3, Bars_Required-1)]) / 3));
         
         if(j < Bars_Required - 3)
         {
            double vel = TickVolume_Buffer[j] - TickVolume_Buffer[j + 1];
            double prev_vel = TickVolume_Buffer[j + 1] - TickVolume_Buffer[j + 2];
            max_accel = MathMax(max_accel, MathAbs(vel - prev_vel));
         }
      }
      
      // Normalize components
      if(max_spread > 0) norm_spread = price_spread / max_spread;
      if(max_velocity > 0) norm_velocity = MathAbs(price_velocity) / max_velocity;
      if(max_accel > 0) norm_accel = MathAbs(volume_accel) / max_accel;
      
      // Calculate Pressure Index (weighted sum of components)
      PressureIndex_Buffer[i] = (0.4 * norm_spread + 0.3 * norm_velocity + 0.3 * norm_accel);
      
      // Direction component (positive for rising prices, negative for falling)
      if(price_velocity < 0)
         PressureIndex_Buffer[i] *= -1;
   }
}

//+------------------------------------------------------------------+
//| Calculate trading signal                                          |
//+------------------------------------------------------------------+
int CalculateSignal()
{
   // Check if we have enough data
   if(ATR_Buffer[0] <= 0)
      return SIGNAL_NONE;
   
   // Get M15 trend direction from Hilbert Transform phase
   bool uptrend_m15 = HilbertPhase_Buffer[0] > 0;
   
   // Get current bar close price
   double close = iClose(Symbol_Name, Primary_TF, 0);
   
   // Check for Pressure Index signals
   bool pressure_buy = PressureIndex_Buffer[1] < 0 && PressureIndex_Buffer[0] > 0 && 
                       MathAbs(PressureIndex_Buffer[0]) > Pressure_Threshold;
   
   bool pressure_sell = PressureIndex_Buffer[1] > 0 && PressureIndex_Buffer[0] < 0 && 
                        MathAbs(PressureIndex_Buffer[0]) > Pressure_Threshold;
   
   // Check for volatility band breakouts
   bool band_breakout_up = close > VolatilityBand_Upper[1];
   bool band_breakout_down = close < VolatilityBand_Lower[1];
   
   // Combine signals for final decision
   int signal = SIGNAL_NONE;
   
   // Buy signal: M15 uptrend + Pressure Index buy + volatility band breakout up
   if(uptrend_m15 && pressure_buy && band_breakout_up)
   {
      signal = SIGNAL_BUY;
      Log("BUY signal generated. Pressure Index: " + DoubleToString(PressureIndex_Buffer[0], 4) + 
          ", Band Breakout: " + DoubleToString(close - VolatilityBand_Upper[1], 5));
   }
   // Sell signal: M15 downtrend + Pressure Index sell + volatility band breakout down
   else if(!uptrend_m15 && pressure_sell && band_breakout_down)
   {
      signal = SIGNAL_SELL;
      Log("SELL signal generated. Pressure Index: " + DoubleToString(PressureIndex_Buffer[0], 4) + 
          ", Band Breakout: " + DoubleToString(VolatilityBand_Lower[1] - close, 5));
   }
   
   return signal;
}

//+------------------------------------------------------------------+
//| Execute trades based on signal                                    |
//+------------------------------------------------------------------+
void ExecuteTrades(int signal)
{
   // Check if we already have an open position
   if(PositionsTotal() > 0)
   {
      for(int i = 0; i < PositionsTotal(); i++)
      {
         if(PositionGetTicket(i))
         {
            if(PositionGetInteger(POSITION_MAGIC) == Magic_Number && 
               PositionGetString(POSITION_SYMBOL) == Symbol_Name)
            {
               // We already have a position for this EA
               return;
            }
         }
      }
   }
   
   // No position exists, proceed with signal
   if(signal == SIGNAL_NONE)
      return;
   
   // Calculate lot size based on risk
   double lot_size = CalculateLotSize();
   if(lot_size <= 0)
      return;
   
   // Get current price
   double price = 0;
   double sl = 0;
   double tp = 0;
   
   if(signal == SIGNAL_BUY)
   {
      price = SymbolInfoDouble(Symbol_Name, SYMBOL_ASK);
      sl = price - ATR_Buffer[0] * SL_Multiplier;
      tp = price + ATR_Buffer[0] * TP_Multiplier;
      
      // Place buy order
      if(!SafeOrderSend(Symbol_Name, ORDER_TYPE_BUY, lot_size, price, sl, tp))
         return;
   }
   else if(signal == SIGNAL_SELL)
   {
      price = SymbolInfoDouble(Symbol_Name, SYMBOL_BID);
      sl = price + ATR_Buffer[0] * SL_Multiplier;
      tp = price - ATR_Buffer[0] * TP_Multiplier;
      
      // Place sell order
      if(!SafeOrderSend(Symbol_Name, ORDER_TYPE_SELL, lot_size, price, sl, tp))
         return;
   }
}

//+------------------------------------------------------------------+
//| Calculate position size based on risk management                  |
//+------------------------------------------------------------------+
double CalculateLotSize()
{
   double risk_amount = AccountInfoDouble(ACCOUNT_EQUITY) * Risk_Percent / 100;
   double atr_value = ATR_Buffer[0];
   
   if(atr_value <= 0)
   {
      Log("ATR value is zero or negative, cannot calculate lot size");
      return 0;
   }
   
   // Calculate stop loss distance in pips
   double sl_distance = atr_value * SL_Multiplier;
   
   // Get tick value and size
   double tick_size = SymbolInfoDouble(Symbol_Name, SYMBOL_TRADE_TICK_SIZE);
   double tick_value = SymbolInfoDouble(Symbol_Name, SYMBOL_TRADE_TICK_VALUE);
   
   if(tick_size <= 0 || tick_value <= 0)
   {
      Log("Invalid tick size or value: " + DoubleToString(tick_size, 8) + ", " + DoubleToString(tick_value, 8));
      return 0;
   }
   
   // Calculate lot size
   double ticks_in_sl = sl_distance / tick_size;
   double loss_per_lot = ticks_in_sl * tick_value;
   
   if(loss_per_lot <= 0)
   {
      Log("Invalid loss per lot calculation: " + DoubleToString(loss_per_lot, 8));
      return 0;
   }
   
   double lot_size = risk_amount / loss_per_lot;
   
   // Get minimum lot size and step
   double min_lot = SymbolInfoDouble(Symbol_Name, SYMBOL_VOLUME_MIN);
   double max_lot = SymbolInfoDouble(Symbol_Name, SYMBOL_VOLUME_MAX);
   double lot_step = SymbolInfoDouble(Symbol_Name, SYMBOL_VOLUME_STEP);
   
   // Adjust lot size to conform to broker requirements
   lot_size = MathFloor(lot_size / lot_step) * lot_step;
   lot_size = MathMax(min_lot, MathMin(max_lot, lot_size));
   
   Log("Calculated lot size: " + DoubleToString(lot_size, 2) + " based on risk: $" + DoubleToString(risk_amount, 2) + 
       ", ATR: " + DoubleToString(atr_value, 5) + ", SL distance: " + DoubleToString(sl_distance, 5));
   
   return lot_size;
}

//+------------------------------------------------------------------+
//| Manage open positions (trailing stop, etc.)                       |
//+------------------------------------------------------------------+
void ManagePositions()
{
   // Iterate through all open positions
   for(int i = 0; i < PositionsTotal(); i++)
   {
      if(PositionGetTicket(i))
      {
         // Check if this position belongs to our EA
         if(PositionGetInteger(POSITION_MAGIC) == Magic_Number && 
            PositionGetString(POSITION_SYMBOL) == Symbol_Name)
         {
            // Get position details
            ulong ticket = PositionGetTicket(i);
            double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
            double current_sl = PositionGetDouble(POSITION_SL);
            double current_tp = PositionGetDouble(POSITION_TP);
            ENUM_POSITION_TYPE position_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
            
            // Get current price
            double current_price = (position_type == POSITION_TYPE_BUY) ? 
                                  SymbolInfoDouble(Symbol_Name, SYMBOL_BID) : 
                                  SymbolInfoDouble(Symbol_Name, SYMBOL_ASK);
            
            // Calculate profit in ATR units
            double profit_in_atr = MathAbs(current_price - open_price) / ATR_Buffer[0];
            
            // Check if we should activate trailing stop
            if(profit_in_atr >= TrailingStop_Trigger)
            {
               double new_sl = 0;
               bool modify_needed = false;
               
               if(position_type == POSITION_TYPE_BUY)
               {
                  // For buy positions, move stop loss up
                  double trail_level = current_price - ATR_Buffer[0] * TrailingStop_Step;
                  
                  // Only move stop loss if it would move it higher
                  if(trail_level > current_sl)
                  {
                     new_sl = trail_level;
                     modify_needed = true;
                  }
               }
               else if(position_type == POSITION_TYPE_SELL)
               {
                  // For sell positions, move stop loss down
                  double trail_level = current_price + ATR_Buffer[0] * TrailingStop_Step;
                  
                  // Only move stop loss if it would move it lower (or if current_sl is zero)
                  if(trail_level < current_sl || current_sl == 0)
                  {
                     new_sl = trail_level;
                     modify_needed = true;
                  }
               }
               
               // Modify position if needed
               if(modify_needed)
               {
                  if(!SafePositionModify(ticket, new_sl, current_tp))
                  {
                     Log("Failed to modify position. Error: " + string(GetLastError()));
                  }
                  else
                  {
                     Log("Trailing stop updated to: " + DoubleToString(new_sl, 5) + " for ticket: " + string(ticket));
                  }
               }
            }
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Safe order sending function with error handling                   |
//+------------------------------------------------------------------+
bool SafeOrderSend(string symbol, ENUM_ORDER_TYPE order_type, double volume, double price, 
                  double sl, double tp)
{
   // Check if trading is allowed
   if(!IsTradeAllowed())
   {
      Log("Trading not allowed. Please check if trading is enabled in the terminal.");
      return false;
   }
   
   // Check if we're in the correct trade context
   if(!MQL5InfoInteger(MQL5_TRADE_ALLOWED))
   {
      Log("Trading context not yet ready. Please try again.");
      return false;
   }
   
   // Prepare trade request
   MqlTradeRequest request = {};
   MqlTradeResult result = {};
   
   request.action = TRADE_ACTION_DEAL;
   request.symbol = symbol;
   request.volume = volume;
   request.type = order_type;
   request.price = price;
   request.sl = sl;
   request.tp = tp;
   request.deviation = 10; // Allow slippage of 10 points
   request.magic = Magic_Number;
   request.comment = "GoldDynamicTrader";
   request.type_filling = ORDER_FILLING_FOK; // Fill or Kill
   
   // Send order
   bool success = OrderSend(request, result);
   
   // Check result
   if(!success)
   {
      Log("OrderSend failed. Error: " + string(GetLastError()) + ", " + string(result.retcode));
      return false;
   }
   
   if(result.retcode != TRADE_RETCODE_DONE)
   {
      Log("OrderSend failed. Return code: " + string(result.retcode));
      return false;
   }
   
   Log("Order executed successfully. Ticket: " + string(result.order) + ", Volume: " + DoubleToString(volume, 2) + 
       ", Price: " + DoubleToString(price, 5) + ", SL: " + DoubleToString(sl, 5) + ", TP: " + DoubleToString(tp, 5));
   
   return true;
}

//+------------------------------------------------------------------+
//| Safe position modify function with error handling                 |
//+------------------------------------------------------------------+
bool SafePositionModify(ulong ticket, double sl, double tp)
{
   // Check if trading is allowed
   if(!IsTradeAllowed())
   {
      Log("Trading not allowed. Please check if trading is enabled in the terminal.");
      return false;
   }
   
   // Check if we're in the correct trade context
   if(!MQL5InfoInteger(MQL5_TRADE_ALLOWED))
   {
      Log("Trading context not yet ready. Please try again.");
      return false;
   }
   
   // Prepare trade request
   MqlTradeRequest request = {};
   MqlTradeResult result = {};
   
   request.action = TRADE_ACTION_SLTP;
   request.position = ticket;
   request.sl = sl;
   request.tp = tp;
   
   // Send order
   bool success = OrderSend(request, result);
   
   // Check result
   if(!success)
   {
      Log("Position modify failed. Error: " + string(GetLastError()) + ", " + string(result.retcode));
      return false;
   }
   
   if(result.retcode != TRADE_RETCODE_DONE)
   {
      Log("Position modify failed. Return code: " + string(result.retcode));
      return false;
   }
   
   return true;
}
